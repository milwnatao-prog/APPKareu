import 'package:flutter/material.dart';
import '../constants/app_design_system.dart';

class ProfessionalAccountScreen extends StatefulWidget {
  const ProfessionalAccountScreen({super.key});

  @override
  State<ProfessionalAccountScreen> createState() => _ProfessionalAccountScreenState();
}

class _ProfessionalAccountScreenState extends State<ProfessionalAccountScreen> {
  // Controllers para os campos edit√°veis
  final TextEditingController _nameController = TextEditingController(text: 'Maria');
  final TextEditingController _surnameController = TextEditingController(text: 'Santos');
  final TextEditingController _documentController = TextEditingController(text: '123.456.789-00');
  final TextEditingController _addressController = TextEditingController(text: 'Rua das Flores, 123, Petr√≥polis - Natal/RN');
  final TextEditingController _emailController = TextEditingController(text: 'maria.santos@email.com');
  final TextEditingController _phoneController = TextEditingController(text: '+55 (84) 99999-9999');
  final TextEditingController _professionalRegistrationController = TextEditingController(text: 'COREN-RN 12345');
  final TextEditingController _specializationController = TextEditingController(text: 'Cuidados com Idosos, Administra√ß√£o de Medicamentos, Fisioterapia Domiciliar');
  final TextEditingController _professionalDescriptionController = TextEditingController(
    text: 'Profissional dedicada com 8 anos de experi√™ncia em cuidados domiciliares. Especializada em cuidados com idosos, administra√ß√£o de medicamentos e acompanhamento m√©dico. Tenho paix√£o por proporcionar qualidade de vida e bem-estar aos pacientes.'
  );
  final TextEditingController _hourlyRateController = TextEditingController(text: '45,00');
  final TextEditingController _experienceController = TextEditingController(text: '8 anos de experi√™ncia em cuidados domiciliares');
  final TextEditingController _certificationsController = TextEditingController(text: 'Curso de Primeiros Socorros, Certifica√ß√£o em Cuidados com Idosos, Curso de Administra√ß√£o de Medicamentos');
  
  // Caracter√≠sticas de personalidade
  final Set<String> _selectedPersonalityTraits = {
    'Emp√°tica',
    'Paciente',
    'Respons√°vel',
    'Comunicativa'
  };
  
  // Estados dos toggles
  bool _facebookLoginEnabled = true;
  bool _googleLoginEnabled = false;
  bool _appleLoginEnabled = false;
  bool _calendarIntegrationEnabled = true;
  bool _notificationsEnabled = true;
  bool _shareLocationEnabled = true;
  bool _acceptUrgentCalls = true;
  bool _availableWeekendsEnabled = false;
  bool _availableHolidaysEnabled = false;
  bool _backgroundCheckVerified = true;
  bool _referencesVerified = true;
  
  // Estado do g√™nero selecionado
  String _selectedGender = 'Feminino';
  
  // Data de nascimento
  DateTime _birthDate = DateTime(1990, 3, 15);
  
  // Estado de edi√ß√£o
  bool _isEditing = false;

  // Especialidades profissionais selecionadas
  final Set<String> _selectedSpecialties = {
    'Cuidados com Idosos',
    'Administra√ß√£o de Medicamentos',
    'Cuidados P√≥s-Cir√∫rgicos',
    'Fisioterapia Domiciliar'
  };

  // Informa√ß√µes de assinatura
  String _currentPlan = 'Premium';
  DateTime _planExpiryDate = DateTime(2024, 12, 31);
  bool _autoRenewal = true;

  // N√≠veis de experi√™ncia selecionados
  final Set<String> _selectedExperienceLevels = {
    'Experiente (5+ anos)',
    'Certifica√ß√µes Profissionais',
    'Primeiros Socorros'
  };

  // Disponibilidade de hor√°rios
  final Set<String> _selectedAvailability = {
    'Manh√£ (6h-12h)',
    'Tarde (12h-18h)',
    'Noite (18h-24h)'
  };

  // √Åreas de atua√ß√£o
  final Set<String> _selectedWorkAreas = {
    'Cuidados com Idosos',
    'Cuidados P√≥s-Operat√≥rios',
    'Reabilita√ß√£o',
    'Cuidados Paliativos'
  };

  // Idiomas falados
  final Set<String> _selectedLanguages = {
    'Portugu√™s',
    'Ingl√™s B√°sico'
  };

  // Certifica√ß√µes e cursos
  final Set<String> _selectedCertifications = {
    'Curso de Primeiros Socorros',
    'Certifica√ß√£o em Cuidados com Idosos',
    'Curso de Administra√ß√£o de Medicamentos'
  };

  @override
  void dispose() {
    _nameController.dispose();
    _surnameController.dispose();
    _documentController.dispose();
    _addressController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _professionalRegistrationController.dispose();
    _specializationController.dispose();
    _professionalDescriptionController.dispose();
    _hourlyRateController.dispose();
    _experienceController.dispose();
    _certificationsController.dispose();
    super.dispose();
  }

  void _toggleEditing() {
    setState(() {
      _isEditing = !_isEditing;
    });
  }

  void _saveChanges() {
    // Aqui voc√™ implementaria a l√≥gica para salvar as altera√ß√µes
    setState(() {
      _isEditing = false;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Altera√ß√µes salvas com sucesso!'),
        backgroundColor: AppDesignSystem.primaryColor,
      ),
    );
  }

  void _showDatePicker() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _birthDate,
      firstDate: DateTime(1940),
      lastDate: DateTime.now(),
    );
    if (picked != null && picked != _birthDate) {
      setState(() {
        _birthDate = picked;
      });
    }
  }

  Widget _buildProfileHeader() {
    return AppDesignSystem.styledCard(
      child: Column(
        children: [
          CircleAvatar(
            radius: 50,
            backgroundColor: AppDesignSystem.primaryColor.withValues(alpha: 0.1),
            child: Text(
              '${_nameController.text[0]}${_surnameController.text[0]}',
              style: AppDesignSystem.h1Style.copyWith(
                color: AppDesignSystem.primaryColor,
              ),
            ),
          ),
          AppDesignSystem.verticalSpace(1),
          Text(
            '${_nameController.text} ${_surnameController.text}',
            style: AppDesignSystem.h2Style,
          ),
          AppDesignSystem.verticalSpace(0.5),
          Container(
            padding: const EdgeInsets.symmetric(
              horizontal: AppDesignSystem.spaceMD,
              vertical: AppDesignSystem.spaceXS,
            ),
            decoration: BoxDecoration(
              color: AppDesignSystem.primaryColor.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(AppDesignSystem.borderRadiusSmall),
            ),
            child: Text(
              'Profissional de Cuidados',
              style: AppDesignSystem.captionStyle.copyWith(
                color: AppDesignSystem.primaryColor,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          AppDesignSystem.verticalSpace(1),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildStatItem('‚≠ê Avalia√ß√£o', '4.8'),
              _buildStatItem('üë• Pacientes', '47'),
              _buildStatItem('‚úÖ Atendimentos', '234'),
            ],
          ),
          AppDesignSystem.verticalSpace(1),
          Container(
            padding: const EdgeInsets.all(AppDesignSystem.spaceMD),
            decoration: BoxDecoration(
              color: AppDesignSystem.successColor.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(AppDesignSystem.borderRadius),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.verified,
                  color: AppDesignSystem.successColor,
                  size: 20,
                ),
                AppDesignSystem.horizontalSpace(0.5),
                Expanded(
                  child: Text(
                    'Perfil Verificado ‚Ä¢ ${_selectedCertifications.length} Certifica√ß√µes',
                    style: AppDesignSystem.bodySmallStyle.copyWith(
                      color: AppDesignSystem.successColor,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatItem(String label, String value) {
    return Column(
      children: [
        Text(
          value,
          style: AppDesignSystem.h3Style.copyWith(
            color: AppDesignSystem.primaryColor,
          ),
        ),
        Text(
          label,
          style: AppDesignSystem.captionStyle,
        ),
      ],
    );
  }




  Widget _buildPersonalInfo() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Informa√ß√µes Pessoais',
            style: AppDesignSystem.sectionTitleStyle,
          ),
          AppDesignSystem.verticalSpace(1),
          
          _buildInfoRow(
            'Nome',
            _nameController,
            Icons.person_outline,
            enabled: _isEditing,
          ),
          
          _buildInfoRow(
            'Sobrenome',
            _surnameController,
            Icons.person_outline,
            enabled: _isEditing,
          ),
          
          _buildInfoRow(
            'CPF',
            _documentController,
            Icons.assignment_ind_outlined,
            enabled: _isEditing,
          ),
          
          _buildInfoRow(
            'Registro Profissional',
            _professionalRegistrationController,
            Icons.verified_user_outlined,
            enabled: _isEditing,
          ),

          _buildGenderSelector(),
          
          _buildDateSelector(),
          
          _buildInfoRow(
            'Endere√ßo',
            _addressController,
            Icons.location_on_outlined,
            enabled: _isEditing,
            maxLines: 2,
          ),
        ],
      ),
    );
  }

  Widget _buildContactInfo() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Contato',
            style: AppDesignSystem.sectionTitleStyle,
          ),
          AppDesignSystem.verticalSpace(1),
          
          _buildInfoRow(
            'E-mail',
            _emailController,
            Icons.email_outlined,
            enabled: _isEditing,
          ),
          
          _buildInfoRow(
            'Telefone',
            _phoneController,
            Icons.phone_outlined,
            enabled: _isEditing,
          ),
        ],
      ),
    );
  }

  Widget _buildProfessionalInfo() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Informa√ß√µes Profissionais',
            style: AppDesignSystem.sectionTitleStyle,
          ),
          AppDesignSystem.verticalSpace(1),

          AppDesignSystem.styledTextField(
            label: 'Descri√ß√£o Profissional',
            hint: 'Conte sobre sua experi√™ncia e especialidades',
            controller: _professionalDescriptionController,
            maxLines: 4,
          ),

          AppDesignSystem.verticalSpace(1),

          _buildMultiSelectSection(
            'Especialidades',
            _selectedSpecialties,
            [
              'Cuidados com Idosos',
              'Administra√ß√£o de Medicamentos',
              'Cuidados P√≥s-Cir√∫rgicos',
              'Fisioterapia Domiciliar',
              'Cuidados Paliativos',
              'Enfermagem Domiciliar',
              'Acompanhamento M√©dico',
              'Reabilita√ß√£o',
            ],
          ),

          AppDesignSystem.verticalSpace(1),

          _buildMultiSelectSection(
            'N√≠vel de Experi√™ncia',
            _selectedExperienceLevels,
            [
              'Iniciante (1-2 anos)',
              'Intermedi√°rio (2-5 anos)',
              'Experiente (5+ anos)',
              'Certifica√ß√µes Profissionais',
              'Primeiros Socorros',
              'Especializa√ß√£o T√©cnica',
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildWorkProfile() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.work,
                color: AppDesignSystem.primaryColor,
                size: 24,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Perfil de Trabalho',
                style: AppDesignSystem.h3Style,
              ),
            ],
          ),
          AppDesignSystem.verticalSpace(1),
          Text(
            '√Åreas de atua√ß√£o e compet√™ncias profissionais',
            style: AppDesignSystem.bodySmallStyle.copyWith(
              color: AppDesignSystem.textSecondaryColor,
            ),
          ),
          AppDesignSystem.verticalSpace(1),

          AppDesignSystem.styledTextField(
            label: 'Especializa√ß√µes',
            hint: 'Liste suas principais especializa√ß√µes',
            controller: _specializationController,
            maxLines: 2,
          ),

          AppDesignSystem.verticalSpace(1),

          AppDesignSystem.styledTextField(
            label: 'Experi√™ncia Profissional',
            hint: 'Descreva sua experi√™ncia na √°rea',
            controller: _experienceController,
            maxLines: 3,
          ),

          AppDesignSystem.verticalSpace(1),

          _buildMultiSelectSection(
            '√Åreas de Atua√ß√£o',
            _selectedWorkAreas,
            [
              'Cuidados com Idosos',
              'Cuidados P√≥s-Operat√≥rios',
              'Reabilita√ß√£o',
              'Cuidados Paliativos',
              'Cuidados com Crian√ßas',
              'Cuidados com Pessoas com Defici√™ncia',
              'Acompanhamento Psicol√≥gico',
              'Cuidados Hospitalares',
            ],
          ),

          AppDesignSystem.verticalSpace(1),

          _buildMultiSelectSection(
            'Idiomas',
            _selectedLanguages,
            [
              'Portugu√™s',
              'Ingl√™s',
              'Espanhol',
              'Franc√™s',
              'Italiano',
              'Libras',
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildCertificationsSection() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.school,
                color: AppDesignSystem.primaryColor,
                size: 24,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Certifica√ß√µes e Cursos',
                style: AppDesignSystem.h3Style,
              ),
            ],
          ),
          AppDesignSystem.verticalSpace(1),
          Text(
            'Suas qualifica√ß√µes e certifica√ß√µes profissionais',
            style: AppDesignSystem.bodySmallStyle.copyWith(
              color: AppDesignSystem.textSecondaryColor,
            ),
          ),
          AppDesignSystem.verticalSpace(1),

          AppDesignSystem.styledTextField(
            label: 'Certifica√ß√µes',
            hint: 'Liste suas certifica√ß√µes e cursos realizados',
            controller: _certificationsController,
            maxLines: 3,
          ),

          AppDesignSystem.verticalSpace(1),

          _buildMultiSelectSection(
            'Certifica√ß√µes Selecionadas',
            _selectedCertifications,
            [
              'Curso de Primeiros Socorros',
              'Certifica√ß√£o em Cuidados com Idosos',
              'Curso de Administra√ß√£o de Medicamentos',
              'Certifica√ß√£o em Fisioterapia',
              'Curso de Enfermagem',
              'Certifica√ß√£o em Psicologia',
              'Curso de Nutri√ß√£o',
              'Certifica√ß√£o em Seguran√ßa do Trabalho',
            ],
          ),

          AppDesignSystem.verticalSpace(1),

          Container(
            padding: const EdgeInsets.all(AppDesignSystem.spaceMD),
            decoration: BoxDecoration(
              color: AppDesignSystem.successColor.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(AppDesignSystem.borderRadius),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.verified_user,
                  color: AppDesignSystem.successColor,
                  size: 20,
                ),
                AppDesignSystem.horizontalSpace(0.5),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Verifica√ß√£o de Antecedentes',
                        style: AppDesignSystem.bodySmallStyle.copyWith(
                          color: AppDesignSystem.successColor,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      Text(
                        'Verificado em ${DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year}',
                        style: AppDesignSystem.captionStyle.copyWith(
                          color: AppDesignSystem.successColor.withValues(alpha: 0.8),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAvailabilitySection() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.schedule,
                color: AppDesignSystem.primaryColor,
                size: 24,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Disponibilidade',
                style: AppDesignSystem.h3Style,
              ),
            ],
          ),
          AppDesignSystem.verticalSpace(1),
          Text(
            'Configure sua disponibilidade para receber propostas de trabalho',
            style: AppDesignSystem.bodySmallStyle.copyWith(
              color: AppDesignSystem.textSecondaryColor,
            ),
          ),
          AppDesignSystem.verticalSpace(1),

          _buildMultiSelectSection(
            'Hor√°rios Dispon√≠veis',
            _selectedAvailability,
            [
              'Madrugada (0h-6h)',
              'Manh√£ (6h-12h)',
              'Tarde (12h-18h)',
              'Noite (18h-24h)',
              'Finais de Semana',
              'Feriados',
            ],
          ),

          AppDesignSystem.verticalSpace(1),

          _buildSwitchTile(
            'Dispon√≠vel nos Finais de Semana',
            'Aceitar trabalhos nos finais de semana',
            _availableWeekendsEnabled,
            (value) {
              setState(() {
                _availableWeekendsEnabled = value;
              });
            },
            Icons.weekend_outlined,
          ),

          AppDesignSystem.verticalSpace(1),

          _buildSwitchTile(
            'Dispon√≠vel em Feriados',
            'Aceitar trabalhos em feriados',
            _availableHolidaysEnabled,
            (value) {
              setState(() {
                _availableHolidaysEnabled = value;
              });
            },
            Icons.celebration_outlined,
          ),
        ],
      ),
    );
  }



  Widget _buildInfoRow(
    String label,
    TextEditingController controller,
    IconData icon, {
    bool enabled = false,
    int maxLines = 1,
  }) {
    return Padding(
      padding: const EdgeInsets.only(bottom: AppDesignSystem.spaceLG),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: AppDesignSystem.surfaceColor,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              icon,
              color: AppDesignSystem.primaryColor,
              size: 20,
            ),
          ),
          AppDesignSystem.horizontalSpace(1),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: AppDesignSystem.captionStyle,
                ),
                const SizedBox(height: 4),
                TextFormField(
                  controller: controller,
                  enabled: enabled,
                  maxLines: maxLines,
                  style: enabled 
                    ? AppDesignSystem.bodyStyle 
                    : AppDesignSystem.bodyStyle.copyWith(
                        color: AppDesignSystem.textSecondaryColor,
                      ),
                  decoration: InputDecoration(
                    isDense: true,
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 8,
                    ),
                    border: enabled 
                      ? OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppDesignSystem.borderColor),
                        )
                      : InputBorder.none,
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: const BorderSide(color: AppDesignSystem.borderColor),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: const BorderSide(color: AppDesignSystem.primaryColor, width: 2),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGenderSelector() {
    return Padding(
      padding: const EdgeInsets.only(bottom: AppDesignSystem.spaceLG),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: AppDesignSystem.surfaceColor,
              borderRadius: BorderRadius.circular(8),
            ),
            child: const Icon(
              Icons.people_outline,
              color: AppDesignSystem.primaryColor,
              size: 20,
            ),
          ),
          AppDesignSystem.horizontalSpace(1),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'G√™nero',
                  style: AppDesignSystem.captionStyle,
                ),
                const SizedBox(height: 4),
                DropdownButtonFormField<String>(
                  value: _selectedGender,
                  onChanged: _isEditing ? (String? newValue) {
                    if (newValue != null) {
                      setState(() {
                        _selectedGender = newValue;
                      });
                    }
                  } : null,
                  decoration: InputDecoration(
                    isDense: true,
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 8,
                    ),
                    border: _isEditing 
                      ? OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppDesignSystem.borderColor),
                        )
                      : InputBorder.none,
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: const BorderSide(color: AppDesignSystem.borderColor),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                      borderSide: const BorderSide(color: AppDesignSystem.primaryColor, width: 2),
                    ),
                  ),
                  items: ['Masculino', 'Feminino', 'Outro', 'Prefiro n√£o informar']
                      .map<DropdownMenuItem<String>>((String value) {
                    return DropdownMenuItem<String>(
                      value: value,
                      child: Text(value),
                    );
                  }).toList(),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDateSelector() {
    return Padding(
      padding: const EdgeInsets.only(bottom: AppDesignSystem.spaceLG),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: AppDesignSystem.surfaceColor,
              borderRadius: BorderRadius.circular(8),
            ),
            child: const Icon(
              Icons.calendar_today_outlined,
              color: AppDesignSystem.primaryColor,
              size: 20,
            ),
          ),
          AppDesignSystem.horizontalSpace(1),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Data de Nascimento',
                  style: AppDesignSystem.captionStyle,
                ),
                const SizedBox(height: 4),
                GestureDetector(
                  onTap: _isEditing ? _showDatePicker : null,
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 8,
                    ),
                    decoration: BoxDecoration(
                      border: _isEditing 
                        ? Border.all(color: AppDesignSystem.borderColor)
                        : null,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          '${_birthDate.day.toString().padLeft(2, '0')}/${_birthDate.month.toString().padLeft(2, '0')}/${_birthDate.year}',
                          style: _isEditing 
                            ? AppDesignSystem.bodyStyle 
                            : AppDesignSystem.bodyStyle.copyWith(
                                color: AppDesignSystem.textSecondaryColor,
                              ),
                        ),
                        if (_isEditing)
                          const Icon(
                            Icons.calendar_today,
                            size: 16,
                            color: AppDesignSystem.primaryColor,
                          ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMultiSelectSection(String title, Set<String> selectedItems, List<String> allItems) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: AppDesignSystem.labelStyle,
        ),
        AppDesignSystem.verticalSpace(0.5),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: allItems.map((item) {
            final isSelected = selectedItems.contains(item);
            return FilterChip(
              label: Text(
                item,
                style: TextStyle(
                  color: isSelected ? Colors.white : AppDesignSystem.textPrimaryColor,
                  fontSize: AppDesignSystem.fontSizeBodySmall,
                ),
              ),
              selected: isSelected,
              onSelected: _isEditing ? (bool selected) {
                setState(() {
                  if (selected) {
                    selectedItems.add(item);
                  } else {
                    selectedItems.remove(item);
                  }
                });
              } : null,
              backgroundColor: AppDesignSystem.surfaceColor,
              selectedColor: AppDesignSystem.primaryColor,
              checkmarkColor: Colors.white,
              side: BorderSide(
                color: isSelected ? AppDesignSystem.primaryColor : AppDesignSystem.borderColor,
              ),
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildSwitchTile(
    String title,
    String subtitle,
    bool value,
    ValueChanged<bool> onChanged,
    IconData icon,
  ) {
    return Padding(
      padding: const EdgeInsets.only(bottom: AppDesignSystem.spaceLG),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: AppDesignSystem.surfaceColor,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              icon,
              color: AppDesignSystem.primaryColor,
              size: 20,
            ),
          ),
          AppDesignSystem.horizontalSpace(1),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: AppDesignSystem.bodyStyle,
                ),
                Text(
                  subtitle,
                  style: AppDesignSystem.captionStyle,
                ),
              ],
            ),
          ),
          Switch(
            value: value,
            onChanged: onChanged,
            activeColor: AppDesignSystem.primaryColor,
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppDesignSystem.backgroundColor,
      appBar: AppDesignSystem.styledAppBar(
        context: context,
        title: 'Perfil Profissional',
        onBackPressed: () => Navigator.of(context).pop(),
        actions: [
          IconButton(
            onPressed: _isEditing ? _saveChanges : _toggleEditing,
            icon: Icon(
              _isEditing ? Icons.check : Icons.edit,
              color: AppDesignSystem.textPrimaryColor,
            ),
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(AppDesignSystem.space2XL),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildProfileHeader(),
            AppDesignSystem.verticalSpace(2),
            _buildPersonalInfo(),
            AppDesignSystem.verticalSpace(2),
            _buildContactInfo(),
            AppDesignSystem.verticalSpace(2),
            _buildProfessionalInfo(),
            AppDesignSystem.verticalSpace(2),
            _buildWorkProfile(),
            AppDesignSystem.verticalSpace(2),
            _buildCertificationsSection(),
            AppDesignSystem.verticalSpace(2),
            _buildAvailabilitySection(),
            AppDesignSystem.verticalSpace(2),
            _buildPricingSection(),
            AppDesignSystem.verticalSpace(2),
            _buildSubscriptionSection(),
            AppDesignSystem.verticalSpace(2),
            _buildLogoutSection(),
            AppDesignSystem.verticalSpace(3),
          ],
        ),
      ),
    );
  }

  Widget _buildPersonalityTraitsSection() {
    final availableTraits = [
      'Emp√°tica', 'Paciente', 'Respons√°vel', 'Comunicativa', 'Carinhosa',
      'Atenta', 'Dedicada', 'Pontual', 'Organizada', 'Flex√≠vel',
      'Calma', 'Energ√©tica', 'Motivadora', 'Discreta', 'Confi√°vel'
    ];

    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.psychology,
                color: AppDesignSystem.primaryColor,
                size: 24,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Caracter√≠sticas de Personalidade',
                style: AppDesignSystem.h3Style,
              ),
            ],
          ),
          AppDesignSystem.verticalSpace(1),
          Text(
            'Selecione suas principais caracter√≠sticas pessoais que ajudam no cuidado:',
            style: AppDesignSystem.bodySmallStyle.copyWith(
              color: AppDesignSystem.textSecondaryColor,
            ),
          ),
          AppDesignSystem.verticalSpace(1),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: availableTraits.map((trait) {
              final isSelected = _selectedPersonalityTraits.contains(trait);
              return FilterChip(
                label: Text(
                  trait,
                  style: TextStyle(
                    color: isSelected ? Colors.white : AppDesignSystem.textPrimaryColor,
                    fontSize: AppDesignSystem.fontSizeBodySmall,
                  ),
                ),
                selected: isSelected,
                onSelected: _isEditing ? (bool selected) {
                  setState(() {
                    if (selected) {
                      _selectedPersonalityTraits.add(trait);
                    } else {
                      _selectedPersonalityTraits.remove(trait);
                    }
                  });
                } : null,
                backgroundColor: AppDesignSystem.surfaceColor,
                selectedColor: AppDesignSystem.primaryColor,
                checkmarkColor: Colors.white,
                side: BorderSide(
                  color: isSelected ? AppDesignSystem.primaryColor : AppDesignSystem.borderColor,
                ),
              );
            }).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildPricingSection() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.monetization_on,
                color: AppDesignSystem.primaryColor,
                size: 24,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Valor por Hora',
                style: AppDesignSystem.h3Style,
              ),
            ],
          ),
          AppDesignSystem.verticalSpace(1),
          Text(
            'Defina seu valor por hora de servi√ßo:',
            style: AppDesignSystem.bodySmallStyle.copyWith(
              color: AppDesignSystem.textSecondaryColor,
            ),
          ),
          AppDesignSystem.verticalSpace(1),
          Row(
            children: [
              Text(
                'R\$',
                style: AppDesignSystem.h2Style.copyWith(
                  color: AppDesignSystem.primaryColor,
                ),
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Expanded(
                child: TextField(
                  controller: _hourlyRateController,
                  enabled: _isEditing,
                  keyboardType: TextInputType.numberWithOptions(decimal: true),
                  decoration: InputDecoration(
                    hintText: '45,00',
                    suffixText: '/hora',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(AppDesignSystem.borderRadius),
                    ),
                    contentPadding: EdgeInsets.symmetric(
                      horizontal: AppDesignSystem.spaceMD,
                      vertical: AppDesignSystem.spaceMD,
                    ),
                  ),
                ),
              ),
            ],
          ),
          AppDesignSystem.verticalSpace(1),
          Container(
            padding: EdgeInsets.all(AppDesignSystem.spaceMD),
            decoration: BoxDecoration(
              color: AppDesignSystem.primaryColor.withOpacity(0.1),
              borderRadius: BorderRadius.circular(AppDesignSystem.borderRadius),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.info_outline,
                  color: AppDesignSystem.primaryColor,
                  size: 20,
                ),
                AppDesignSystem.horizontalSpace(0.5),
                Expanded(
                  child: Text(
                    'Seus ganhos podem variar de acordo com a demanda e avalia√ß√µes dos pacientes.',
                    style: AppDesignSystem.captionStyle.copyWith(
                      color: AppDesignSystem.primaryColor,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSubscriptionSection() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.workspace_premium,
                color: AppDesignSystem.primaryColor,
                size: 24,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Plano de Assinatura',
                style: AppDesignSystem.h3Style,
              ),
            ],
          ),
          AppDesignSystem.verticalSpace(1),
          Container(
            width: double.infinity,
            padding: EdgeInsets.all(AppDesignSystem.spaceLG),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  AppDesignSystem.primaryColor,
                  AppDesignSystem.primaryColor.withOpacity(0.8),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(AppDesignSystem.borderRadius),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.diamond,
                      color: Colors.white,
                      size: 20,
                    ),
                    AppDesignSystem.horizontalSpace(0.5),
                    Text(
                      'Plano $_currentPlan',
                      style: AppDesignSystem.h3Style.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                AppDesignSystem.verticalSpace(0.5),
                Text(
                  'V√°lido at√©: ${_planExpiryDate.day}/${_planExpiryDate.month}/${_planExpiryDate.year}',
                  style: AppDesignSystem.bodySmallStyle.copyWith(
                    color: Colors.white.withOpacity(0.9),
                  ),
                ),
              ],
            ),
          ),
          AppDesignSystem.verticalSpace(1),
          _buildSwitchTile(
            'Renova√ß√£o Autom√°tica',
            'Renova automaticamente na data de vencimento',
            _autoRenewal,
            (value) {
              setState(() {
                _autoRenewal = value;
              });
            },
            Icons.autorenew,
          ),
          Row(
            children: [
              Expanded(
                child: AppDesignSystem.secondaryButton(
                  text: 'Alterar Plano',
                  onPressed: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Funcionalidade de altera√ß√£o de plano em desenvolvimento'),
                        backgroundColor: AppDesignSystem.infoColor,
                      ),
                    );
                  },
                ),
              ),
              AppDesignSystem.horizontalSpace(1),
              Expanded(
                child: AppDesignSystem.primaryButton(
                  text: 'Ver Benef√≠cios',
                  onPressed: () {
                    _showSubscriptionBenefits();
                  },
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildLogoutSection() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.logout,
                color: AppDesignSystem.errorColor,
                size: 24,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Sair do Aplicativo',
                style: AppDesignSystem.h3Style.copyWith(
                  color: AppDesignSystem.errorColor,
                ),
              ),
            ],
          ),
          AppDesignSystem.verticalSpace(1),
          Text(
            'Voc√™ ser√° desconectado e precisar√° fazer login novamente.',
            style: AppDesignSystem.bodySmallStyle.copyWith(
              color: AppDesignSystem.textSecondaryColor,
            ),
          ),
          AppDesignSystem.verticalSpace(1),
          SizedBox(
            width: double.infinity,
            child: OutlinedButton.icon(
              onPressed: () => _showLogoutConfirmation(),
              icon: Icon(
                Icons.exit_to_app,
                color: AppDesignSystem.errorColor,
              ),
              label: Text(
                'Sair do App',
                style: TextStyle(
                  color: AppDesignSystem.errorColor,
                  fontWeight: FontWeight.w600,
                ),
              ),
              style: OutlinedButton.styleFrom(
                side: BorderSide(color: AppDesignSystem.errorColor),
                padding: EdgeInsets.symmetric(vertical: AppDesignSystem.spaceLG),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(AppDesignSystem.borderRadius),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showSubscriptionBenefits() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Icon(
                Icons.workspace_premium,
                color: AppDesignSystem.primaryColor,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Benef√≠cios Premium',
                style: AppDesignSystem.h3Style,
              ),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildBenefitItem('‚úì Prioridade nas buscas de trabalho'),
              _buildBenefitItem('‚úì Comiss√£o reduzida da plataforma'),
              _buildBenefitItem('‚úì Acesso a clientes premium'),
              _buildBenefitItem('‚úì Estat√≠sticas avan√ßadas de performance'),
              _buildBenefitItem('‚úì Suporte priorit√°rio 24/7'),
              _buildBenefitItem('‚úì Certifica√ß√µes gratuitas'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('Fechar'),
            ),
          ],
        );
      },
    );
  }

  Widget _buildBenefitItem(String text) {
    return Padding(
      padding: EdgeInsets.only(bottom: AppDesignSystem.spaceSM),
      child: Text(
        text,
        style: AppDesignSystem.bodyStyle,
      ),
    );
  }

  void _showLogoutConfirmation() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Icon(
                Icons.warning,
                color: AppDesignSystem.warningColor,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Confirmar Sa√≠da',
                style: AppDesignSystem.h3Style,
              ),
            ],
          ),
          content: Text(
            'Tem certeza que deseja sair do aplicativo? Voc√™ precisar√° fazer login novamente.',
            style: AppDesignSystem.bodyStyle,
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text(
                'Cancelar',
                style: TextStyle(color: AppDesignSystem.textSecondaryColor),
              ),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop(); // Fecha o dialog
                Navigator.pushNamedAndRemoveUntil(
                  context,
                  '/login',
                  (route) => false,
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: AppDesignSystem.errorColor,
              ),
              child: Text(
                'Sair',
                style: TextStyle(color: Colors.white),
              ),
            ),
          ],
        );
      },
    );
  }

  Widget _buildAccessSecurity() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Acesso e Seguran√ßa',
            style: AppDesignSystem.h3Style,
          ),
          AppDesignSystem.verticalSpace(1.5),
          _buildSwitchRow(
            'Notifica√ß√µes',
            'Receber notifica√ß√µes push',
            _notificationsEnabled,
            (value) => setState(() => _notificationsEnabled = value),
            Icons.notifications_outlined,
          ),
          AppDesignSystem.verticalSpace(1),
          _buildSwitchRow(
            'Compartilhar Localiza√ß√£o',
            'Permitir que pacientes vejam sua localiza√ß√£o',
            _shareLocationEnabled,
            (value) => setState(() => _shareLocationEnabled = value),
            Icons.location_on_outlined,
          ),
          AppDesignSystem.verticalSpace(1),
          _buildSwitchRow(
            'Dispon√≠vel nos Finais de Semana',
            'Aceitar trabalhos nos finais de semana',
            _availableWeekendsEnabled,
            (value) => setState(() => _availableWeekendsEnabled = value),
            Icons.weekend_outlined,
          ),
        ],
      ),
    );
  }

  Widget _buildSocialLogin() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Login Social',
            style: AppDesignSystem.h3Style,
          ),
          AppDesignSystem.verticalSpace(1.5),
          _buildSwitchRow(
            'Login com Facebook',
            'Permitir login atrav√©s do Facebook',
            _facebookLoginEnabled,
            (value) => setState(() => _facebookLoginEnabled = value),
            Icons.facebook,
          ),
          AppDesignSystem.verticalSpace(1),
          _buildSwitchRow(
            'Login com Google',
            'Permitir login atrav√©s do Google',
            _googleLoginEnabled,
            (value) => setState(() => _googleLoginEnabled = value),
            Icons.login,
          ),
          AppDesignSystem.verticalSpace(1),
          _buildSwitchRow(
            'Login com Apple',
            'Permitir login atrav√©s do Apple ID',
            _appleLoginEnabled,
            (value) => setState(() => _appleLoginEnabled = value),
            Icons.apple,
          ),
        ],
      ),
    );
  }

  Widget _buildPreferences() {
    return AppDesignSystem.styledCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.settings,
                color: AppDesignSystem.primaryColor,
                size: 24,
              ),
              AppDesignSystem.horizontalSpace(0.5),
              Text(
                'Prefer√™ncias Profissionais',
                style: AppDesignSystem.h3Style,
              ),
            ],
          ),
          AppDesignSystem.verticalSpace(1.5),
          _buildSwitchTile(
            'Aceitar Chamadas de Emerg√™ncia',
            'Dispon√≠vel para atendimentos urgentes',
            _acceptUrgentCalls,
            (value) => setState(() => _acceptUrgentCalls = value),
            Icons.emergency,
          ),
          AppDesignSystem.verticalSpace(1),
          _buildSwitchTile(
            'Integra√ß√£o com Calend√°rio',
            'Sincronizar agenda com calend√°rio do dispositivo',
            _calendarIntegrationEnabled,
            (value) => setState(() => _calendarIntegrationEnabled = value),
            Icons.calendar_today,
          ),
          AppDesignSystem.verticalSpace(1),
          _buildSwitchTile(
            'Compartilhar Localiza√ß√£o',
            'Permitir que pacientes vejam sua localiza√ß√£o aproximada',
            _shareLocationEnabled,
            (value) => setState(() => _shareLocationEnabled = value),
            Icons.location_on_outlined,
          ),
        ],
      ),
    );
  }

  Widget _buildSwitchRow(String title, String subtitle, bool value, Function(bool) onChanged, IconData icon) {
    return Row(
      children: [
        Icon(
          icon,
          color: AppDesignSystem.textSecondaryColor,
          size: 20,
        ),
        AppDesignSystem.horizontalSpace(1),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: AppDesignSystem.bodyStyle,
              ),
              Text(
                subtitle,
                style: AppDesignSystem.captionStyle,
              ),
            ],
          ),
        ),
        Switch(
          value: value,
          onChanged: onChanged,
          activeColor: AppDesignSystem.primaryColor,
        ),
      ],
    );
  }
}
